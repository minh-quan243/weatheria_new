import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
import streamlit as st
from datetime import datetime, timedelta

# üìå ƒê·ªçc file CSV ch·ª©a t·ªânh v√† t·ªça ƒë·ªô
province_df = pd.read_csv("D:/Pycharm/weather-new/data/Raw/japan_lot_lat.csv")

# Chuy·ªÉn d·ªØ li·ªáu t·ªânh v√† t·ªça ƒë·ªô th√†nh dictionary
provinces_coords = dict(zip(province_df['Province'], zip(province_df['lat'], province_df['lon'])))

# üìå Danh s√°ch c·ªôt ƒë·∫∑c tr∆∞ng d√πng chung cho t·∫•t c·∫£ model
FEATURE_COLUMNS = ['Rain', 'Temp', 'WindSpeed', 'Pressure', 'Humidity', 'CloudCover', 'WindDirection', 'Month',
                   'Season']

# Load models
model_onset = joblib.load('models/model_use/onset_model_xgboost.pkl')
model_intensity = joblib.load('models/model_use/storm_intensity_xgboost.pkl')
model_regression = joblib.load('models/model_use/regression_xgboost_maxwind.pkl')
model_duration = joblib.load('models/model_use/duration_rf_model.pkl')

# Load 3 new models
model_1 = joblib.load('models/model_use/istyphoon_model.pkl')  # Model 1
model_2 = joblib.load('models/model_use/numtyphoon_model.pkl')  # Model 2
model_3 = joblib.load('models/model_use/region_model.pkl')  # Model 3

# Load scalers
scaler_intensity = joblib.load('models/model_use/scaler_intensity.pkl')
scaler_regression = joblib.load('models/model_use/regression_scaler.pkl')
scaler_duration = joblib.load('models/model_use/duration_scaler.pkl')

# Load SHAP explainers
explainer_onset = shap.Explainer(model_onset)
explainer_intensity = shap.Explainer(model_intensity)
explainer_regression = shap.Explainer(model_regression)
explainer_duration = shap.Explainer(model_duration)
explainer_model_1 = shap.Explainer(model_1)
explainer_model_2 = shap.Explainer(model_2)
explainer_model_3 = shap.Explainer(model_3.estimators_[0])


# Chu·∫©n h√≥a input cho 4 m√¥ h√¨nh c≈©
def prepare_features_old_models(rain, temp, wind_speed, pressure, humidity, cloud_cover, wind_direction, month, season):
    # T·∫°o input cho c√°c m√¥ h√¨nh d·ª±a tr√™n nƒÉm, th√°ng v√† m√πa
    season_mapping = {'Winter': 0, 'Spring': 1, 'Summer': 2, 'Autumn': 3}
    season_num = season_mapping.get(season, -1)  # M√£ h√≥a m√πa

    df = pd.DataFrame([{
        'Rain': rain,
        'Temp': temp,
        'WindSpeed': wind_speed,
        'Pressure': pressure,
        'Humidity': humidity,
        'CloudCover': cloud_cover,
        'WindDirection': wind_direction,
        'Month': month,
        'Season': season_num
    }])

    return df[FEATURE_COLUMNS]


# Chu·∫©n h√≥a input cho 3 m√¥ h√¨nh m·ªõi (ch·ªâ c√≥ nƒÉm, th√°ng v√† m√πa)
def prepare_features_new_models(year, month, season):
    # T·∫°o input cho c√°c m√¥ h√¨nh m·ªõi ch·ªâ d·ª±a tr√™n nƒÉm, th√°ng v√† m√πa
    season_mapping = {'Winter': 0, 'Spring': 1, 'Summer': 2, 'Autumn': 3}
    season_num = season_mapping.get(season, -1)  # M√£ h√≥a m√πa

    df = pd.DataFrame([{
        'year': year,
        'month': month,
        'Season': season_num
    }])

    # One-Hot Encoding cho 'Month' v√† 'Season'
    df = pd.get_dummies(df, columns=['month', 'Season'], drop_first=True)  # drop_first ƒë·ªÉ tr√°nh dummy variable trap

    # ƒê·∫£m b·∫£o c√°c c·ªôt ƒë√∫ng th·ª© t·ª± gi·ªëng nh∆∞ khi hu·∫•n luy·ªán m√¥ h√¨nh
    expected_columns = ['year', 'month', 'season_Spring', 'season_Summer', 'season_Winter']
    for col in expected_columns:
        if col not in df.columns:
            df[col] = 0  # Th√™m c·ªôt thi·∫øu v√†o n·∫øu ch∆∞a c√≥ (set gi√° tr·ªã l√† 0)

    df = df[expected_columns]  # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt

    return df


# V·∫Ω SHAP waterfall plot
def show_shap_plot(explainer, features, model_name):
    shap_values = explainer(features)

    st.subheader(f"üîç SHAP - {model_name}")
    fig, ax = plt.subplots()

    try:
        if len(shap_values.values.shape) == 3:
            sv = shap.Explanation(
                values=shap_values.values[0, 1],
                base_values=shap_values.base_values[0, 1],
                data=shap_values.data[0],
                feature_names=shap_values.feature_names
            )
        else:
            sv = shap_values[0]
        shap.plots.waterfall(sv, max_display=6, show=False)
        st.pyplot(fig)
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì SHAP: {e}")


# D·ª± ƒëo√°n cho 4 m√¥ h√¨nh c≈©
def predict_for_old_models():
    # L·∫•y nƒÉm, th√°ng v√† m√πa theo th·ªùi gian th·ª±c
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month

    # Logic l·∫•y th√°ng hi·ªán t·∫°i ho·∫∑c th√°ng sau
    if current_date.day <= 15:
        month = current_month
    else:
        month = current_month % 12 + 1

    season = 'Winter' if month in [12, 1, 2] else 'Spring' if month in [3, 4, 5] else 'Summer' if month in [6, 7, 8] else 'Autumn'

    # T·∫°o input cho c√°c m√¥ h√¨nh d·ª±a tr√™n nƒÉm, th√°ng v√† m√πa
    st.write(f"üìÖ D·ª± ƒëo√°n cho th√°ng {month} - M√πa {season}")

    # T·∫°o d·ªØ li·ªáu ch·ªâ v·ªõi nƒÉm, th√°ng v√† m√πa
    input_data = prepare_features_old_models(0, 0, 0, 0, 0, 0, 0, month, season)

    # D·ª± ƒëo√°n tr√™n 4 m√¥ h√¨nh c≈©
    onset_input = input_data
    storm = model_onset.predict(onset_input)[0]
    st.write("üåÄ Ph√°t hi·ªán b√£o:", "üö® C√≥ th·ªÉ c√≥ b√£o" if storm == 1 else "‚úÖ Kh√¥ng c√≥ d·∫•u hi·ªáu b√£o")

    if storm == 1:
        input_i = input_data
        X_i = scaler_intensity.transform(input_i)
        intensity = model_intensity.predict(X_i)[0]
        st.write(f"üå™Ô∏è C∆∞·ªùng ƒë·ªô: `{intensity}`")

        input_r = input_data
        X_r = scaler_regression.transform(input_r)
        max_wind = model_regression.predict(X_r)[0]
        st.write(f"üí® Gi√≥ m·∫°nh nh·∫•t: `{max_wind:.2f}` km/h")

        input_d = input_data
        X_d = scaler_duration.transform(input_d)
        duration = model_duration.predict(X_d)[0]
        st.write(f"‚è≥ Th·ªùi gian ·∫£nh h∆∞·ªüng: `{duration:.1f}` gi·ªù")
    else:
        st.write("Th·ªùi ti·∫øt b√¨nh th∆∞·ªùng")


# D·ª± ƒëo√°n cho 3 m√¥ h√¨nh m·ªõi
def predict_for_new_models():
    # L·∫•y nƒÉm, th√°ng v√† m√πa theo th·ªùi gian th·ª±c
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month

    # Logic l·∫•y th√°ng hi·ªán t·∫°i ho·∫∑c th√°ng sau
    if current_date.day <= 15:
        month = current_month
    else:
        month = current_month % 12 + 1

    season = 'Winter' if month in [12, 1, 2] else 'Spring' if month in [3, 4, 5] else 'Summer' if month in [6, 7,
                                                                                                            8] else 'Autumn'

    # T·∫°o input cho c√°c m√¥ h√¨nh m·ªõi ch·ªâ d·ª±a tr√™n nƒÉm, th√°ng v√† m√πa
    st.write(f"üìÖ D·ª± ƒëo√°n cho th√°ng {month} - M√πa {season}")

    # T·∫°o d·ªØ li·ªáu ch·ªâ v·ªõi nƒÉm, th√°ng v√† m√πa cho c√°c m√¥ h√¨nh m·ªõi
    input_data = prepare_features_new_models(current_year, month, season)

    # D·ª± ƒëo√°n tr√™n 3 m√¥ h√¨nh m·ªõi
    input_m1 = input_data
    prediction_model_1 = model_1.predict(input_m1)[0]
    st.write(f"üîÆ D·ª± ƒëo√°n t·ª´ Model 1: `{prediction_model_1}`")

    if prediction_model_1 == 1:
        input_m2 = input_data
        prediction_model_2 = model_2.predict(input_m2)[0]
        st.write(f"üîÆ D·ª± ƒëo√°n t·ª´ Model 2: `{prediction_model_2}`")
        show_shap_plot(explainer_model_2, input_m2, "Model 2")

        input_m3 = input_data
        prediction_model_3 = model_3.predict(input_m3)[0]

        # M√£ h√≥a ng∆∞·ª£c l·∫°i k·∫øt qu·∫£ d·ª± ƒëo√°n t·ª´ Model 3 (v√≠ d·ª•: 0 -> North, 1 -> South, ...)
        region_mapping = {0: 'North', 1: 'South', 2: 'East', 3: 'West', 4: 'Unknown', 5: 'Central'}
        predicted_region = region_mapping.get(prediction_model_3, 'Unknown')

        st.write(f"üîÆ D·ª± ƒëo√°n t·ª´ Model 3: `{predicted_region}`")  # In t√™n v√πng b√£o thay v√¨ s·ªë
        show_shap_plot(explainer_model_3, input_m3, "Model 3")
    else:
        st.write("‚ö†Ô∏è Model 1 d·ª± ƒëo√°n kh√¥ng c√≥ b√£o, kh√¥ng ch·∫°y c√°c m√¥ h√¨nh ti·∫øp theo.")

    show_shap_plot(explainer_model_1, input_m1, "Model 1")

# Giao di·ªán Streamlit
st.set_page_config(layout="wide")
st.title("üåÄ D·ª± b√°o B√£o Hi·ªán T·∫°i & SHAP Gi·∫£i th√≠ch")

# D·ª± ƒëo√°n d·ª±a tr√™n nƒÉm, th√°ng v√† m√πa cho c√°c m√¥ h√¨nh m·ªõi (t·ª± ƒë·ªông ch·∫°y ngay khi trang ƒë∆∞·ª£c t·∫£i)
predict_for_new_models()

# D·ª± ƒëo√°n t·ª´ t·ªânh cho 4 m√¥ h√¨nh c≈© (ch·ªâ ch·∫°y khi nh·∫•n n√∫t)
selected_province = st.selectbox("üìç Ch·ªçn t·ªânh t·∫°i Nh·∫≠t B·∫£n", options=list(provinces_coords.keys()))
if st.button("‚ñ∂Ô∏è D·ª± ƒëo√°n cho t∆∞∆°ng lai g·∫ßn"):
    st.write("üîÑ ƒêang d·ª± ƒëo√°n...")
    predict_for_old_models()
